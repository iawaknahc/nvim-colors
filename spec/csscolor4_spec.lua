local csscolor4 = require("nvim-colors.csscolor4")

describe("angle", function()
  it("convert from deg to deg", function()
    assert.are_same({ 90, "deg" }, csscolor4.to_deg({ 100, "grad" }))
  end)
  it("convert from rad to deg", function()
    assert.are_same({ 90, "deg" }, csscolor4.to_deg({ 2 * math.pi / 4, "rad" }))
  end)
  it("convert from turn to deg", function()
    assert.are_same({ 90, "deg" }, csscolor4.to_deg({ 0.25, "turn" }))
  end)
end)

describe("percentage", function()
  it("convert to number", function()
    assert.are_same(1, csscolor4.percentage2number({ 100, "percentage" }))
    assert.are_same(0, csscolor4.percentage2number({ 0, "percentage" }))
    assert.are_same(-0.1, csscolor4.percentage2number({ -10, "percentage" }))

    assert.are_same(255, csscolor4.percentage2number({ 100, "percentage" }, 255))
    assert.are_same(0, csscolor4.percentage2number({ 0, "percentage" }, 255))
    assert.are_same(-25.5, csscolor4.percentage2number({ -10, "percentage" }, 255))
  end)
end)

describe("parse_value", function()
  it("parse none", function()
    assert.are_same("none", csscolor4.parse_value("none"))
    assert.are_same("none", csscolor4.parse_value("None"))
    assert.are_same("none", csscolor4.parse_value("NONE"))
    assert.are_same("none", csscolor4.parse_value("nONE"))
  end)
  it("parse number", function()
    assert.are_same(0, csscolor4.parse_value("0"))
    assert.are_same(1, csscolor4.parse_value("1"))
    assert.are_same(1, csscolor4.parse_value("+1"))
    assert.are_same(-1, csscolor4.parse_value("-1"))
    assert.are_same(1.1, csscolor4.parse_value("1.1"))
    assert.are_same(0.1, csscolor4.parse_value(".1"))
    assert.are_same(0.123, csscolor4.parse_value(".123"))
    assert.are_same(1000000, csscolor4.parse_value("1e6"))
    assert.are_same(-1000, csscolor4.parse_value("-1e3"))
  end)
  it("parse percentage", function()
    assert.are_same({ 0, "percentage" }, csscolor4.parse_value("0%"))
    assert.are_same({ 1, "percentage" }, csscolor4.parse_value("1%"))
    assert.are_same({ 1, "percentage" }, csscolor4.parse_value("+1%"))
    assert.are_same({ -1, "percentage" }, csscolor4.parse_value("-1%"))
    assert.are_same({ 1.1, "percentage" }, csscolor4.parse_value("1.1%"))
    assert.are_same({ 0.1, "percentage" }, csscolor4.parse_value(".1%"))
    assert.are_same({ 0.123, "percentage" }, csscolor4.parse_value(".123%"))
    assert.are_same({ 1000000, "percentage" }, csscolor4.parse_value("1e6%"))
    assert.are_same({ -1000, "percentage" }, csscolor4.parse_value("-1e3%"))
  end)
  it("parse angle", function()
    assert.are_same({ 0, "deg" }, csscolor4.parse_value("0deg"))
    assert.are_same({ 0, "grad" }, csscolor4.parse_value("0grad"))
    assert.are_same({ 0, "rad" }, csscolor4.parse_value("0rad"))
    assert.are_same({ 0, "turn" }, csscolor4.parse_value("0turn"))
  end)
  it("return nil for everything else", function()
    assert.are_same(nil, csscolor4.parse_value(""))
    assert.are_same(nil, csscolor4.parse_value("foobar"))
    assert.are_same(nil, csscolor4.parse_value("0X20"))
    assert.are_same(nil, csscolor4.parse_value("0x20"))
  end)
end)

describe("rgb", function()
  it("parse rgb", function()
    assert.are_same(nil, csscolor4.rgb("", "", ""))

    assert.are_same({ "rgb", { "none", "none", "none" } }, csscolor4.rgb("none", "none", "none"))
    assert.are_same({ "rgb", { "none", "none", "none" }, "none" }, csscolor4.rgb("none", "none", "none", "none"))

    assert.are_same({ "rgb", { "none", "none", "none" } }, csscolor4.rgb("NONE", "NONE", "NONE"))
    assert.are_same({ "rgb", { "none", "none", "none" }, "none" }, csscolor4.rgb("NONE", "NONE", "NONE", "NONE"))

    assert.are_same({ "rgb", { 0, 0, 0 } }, csscolor4.rgb("0", "0", "0"))
    assert.are_same({ "rgb", { 255, 255, 255 } }, csscolor4.rgb("255", "255", "255"))
    assert.are_same({ "rgb", { 51, 102, 153 } }, csscolor4.rgb("51", "102", "153"))
    assert.are_same({ "rgb", { 51, 102, 153 }, 0.5 }, csscolor4.rgb("51", "102", "153", "50%"))
    assert.are_same({ "rgb", { 51, 102, 153 }, 0.5 }, csscolor4.rgb("51", "102", "153", "0.5"))
    assert.are_same({ "rgb", { 255, 255, 255 }, 1 }, csscolor4.rgb("300", "300", "300", "120%"))
    assert.are_same({ "rgb", { 0, 0, 0 } }, csscolor4.rgb("-51", "-102", "-153"))
    assert.are_same({ "rgb", { 0, 0, 0 }, 0 }, csscolor4.rgb("-51", "-102", "-153", "-10%"))
    assert.are_same({ "rgb", { 0, 0, 0 }, 0 }, csscolor4.rgb("-51", "-102", "-153", "-0.1"))

    assert.are_same({ "rgb", { 0, 0, 0 } }, csscolor4.rgb("0%", "0%", "0%"))
    assert.are_same({ "rgb", { 255, 255, 255 } }, csscolor4.rgb("100%", "100%", "100%"))
    assert.are_same({ "rgb", { 51, 102, 153 } }, csscolor4.rgb("20%", "40%", "60%"))
    assert.are_same({ "rgb", { 51, 102, 153 }, 0.5 }, csscolor4.rgb("20%", "40%", "60%", "50%"))
    assert.are_same({ "rgb", { 51, 102, 153 }, 0.5 }, csscolor4.rgb("20%", "40%", "60%", "0.5"))
    assert.are_same({ "rgb", { 255, 255, 255 }, 1 }, csscolor4.rgb("120%", "120%", "120%", "120%"))
    assert.are_same({ "rgb", { 0, 0, 0 } }, csscolor4.rgb("-20%", "-40%", "-60%"))
    assert.are_same({ "rgb", { 0, 0, 0 }, 0 }, csscolor4.rgb("-20%", "-40%", "-60%", "-10%"))
    assert.are_same({ "rgb", { 0, 0, 0 }, 0 }, csscolor4.rgb("-20%", "-40%", "-60%", "-0.5"))
  end)
end)

describe("srgb", function()
  it("parse srgb", function()
    assert.are_same(nil, csscolor4.srgb("", "", ""))

    assert.are_same({ "srgb", { "none", "none", "none" } }, csscolor4.srgb("none", "none", "none"))
    assert.are_same({ "srgb", { "none", "none", "none" }, "none" }, csscolor4.srgb("none", "none", "none", "none"))

    assert.are_same({ "srgb", { "none", "none", "none" } }, csscolor4.srgb("NONE", "NONE", "NONE"))
    assert.are_same({ "srgb", { "none", "none", "none" }, "none" }, csscolor4.srgb("NONE", "NONE", "NONE", "NONE"))

    assert.are_same({ "srgb", { 0, 0, 0 } }, csscolor4.srgb("0", "0", "0"))
    assert.are_same({ "srgb", { 1, 1, 1 } }, csscolor4.srgb("1", "1", "1"))
    assert.are_same({ "srgb", { 0.2, 0.4, 0.6 } }, csscolor4.srgb("0.2", "0.4", "0.6"))
    assert.are_same({ "srgb", { 0.2, 0.4, 0.6 }, 0.5 }, csscolor4.srgb("0.2", "0.4", "0.6", "50%"))
    assert.are_same({ "srgb", { 0.2, 0.4, 0.6 }, 0.5 }, csscolor4.srgb("0.2", "0.4", "0.6", "0.5"))
    assert.are_same({ "srgb", { 1.2, 1.4, 1.6 }, 1.2 }, csscolor4.srgb("1.2", "1.4", "1.6", "120%"))
    assert.are_same({ "srgb", { -0.2, -0.4, -0.6 } }, csscolor4.srgb("-0.2", "-0.4", "-0.6"))
    assert.are_same({ "srgb", { -0.2, -0.4, -0.6 }, -0.1 }, csscolor4.srgb("-0.2", "-0.4", "-0.6", "-10%"))
    assert.are_same({ "srgb", { -0.2, -0.4, -0.6 }, -0.1 }, csscolor4.srgb("-0.2", "-0.4", "-0.6", "-0.1"))

    assert.are_same({ "srgb", { 0, 0, 0 } }, csscolor4.srgb("0%", "0%", "0%"))
    assert.are_same({ "srgb", { 1, 1, 1 } }, csscolor4.srgb("100%", "100%", "100%"))
    assert.are_same({ "srgb", { 0.2, 0.4, 0.6 } }, csscolor4.srgb("20%", "40%", "60%"))
    assert.are_same({ "srgb", { 0.2, 0.4, 0.6 }, 0.5 }, csscolor4.srgb("20%", "40%", "60%", "50%"))
    assert.are_same({ "srgb", { 0.2, 0.4, 0.6 }, 0.5 }, csscolor4.srgb("20%", "40%", "60%", "0.5"))
    assert.are_same({ "srgb", { 1.2, 1.4, 1.6 }, 1.2 }, csscolor4.srgb("120%", "140%", "160%", "120%"))
    assert.are_same({ "srgb", { -0.2, -0.4, -0.6 } }, csscolor4.srgb("-20%", "-40%", "-60%"))
    assert.are_same({ "srgb", { -0.2, -0.4, -0.6 }, -0.1 }, csscolor4.srgb("-20%", "-40%", "-60%", "-10%"))
    assert.are_same({ "srgb", { -0.2, -0.4, -0.6 }, -0.1 }, csscolor4.srgb("-20%", "-40%", "-60%", "-0.1"))
  end)
end)
